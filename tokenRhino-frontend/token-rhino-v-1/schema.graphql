type CreateFeePaid @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  createFeeWei: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreateFeeUpdated @entity(immutable: true) {
  id: Bytes!
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeReceived @entity(immutable: true) {
  id: Bytes!
  presale: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeesWithdrawn @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PolicyUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PresaleCreated @entity(immutable: true) {
  id: Bytes!
  creator: Bytes! # address
  presale: Bytes! # address
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity(immutable: true) {
  id: Bytes! # token address
  name: String
  symbol: String
  decimals: Int
}


type Presale @entity(immutable: true) {
  id: Bytes! # presale contract address
  creator: Bytes!
  presale: Bytes!
  token: Bytes!
  tokenInfo: Token # 1:1 Beziehung
  createdAt: BigInt!
  factoryEvent: PresaleCreated! # 1:1 Beziehung

  # Neue Fields f√ºr Metadata
  metadataCID: String  # IPFS CID/Hash

  # From the Presale contract:
  tokensForSaleUnits: BigInt
  tokensPerEth: BigInt
  softCap: BigInt
  hardCap: BigInt
  startTime: BigInt
  endTime: BigInt
  minContribution: BigInt
  maxContribution: BigInt
  finalized: Boolean

  # Running metrics:
  state: Int
  raised: BigInt        
  createdAtBlock: BigInt
  createdAtTimestamp: BigInt

}
